# Config for using AWSAuthRuntimeService for Authenticating calls to LookoutMitigationService.
#
# Config values are based off:
# //brazil/src/appgroup/coral/cookbook/CoralAwsAuthRuntimeDemo/mainline/brazil-config/override/AWSAuth.cfg#3
#
# Endpoint config is taken from:
# https://w.amazon.com/index.php/AWSAuth/AuthRuntimeClient/BrazilConfig

# Authentication
*.*.BSFSRClassInfo.ServiceConfig.AWSAuthRuntimeService =
 {
     description = "AWSAuthRuntimeService";
     proxyClass = BSFSRHttpGeneric;
     handlerClass = AWSAuthRuntimeServiceHandler;
     cti = "AWS|PlatformDev|Other";
     availabilityTestMethod = Ping;
     availabilityTestArgs = { Foo = Bar; Baz = Car; };
     availabilityTestShared = { Shared = Good; };

     timeouts = {
        default=3.0;
     };
};

prod.us-east-1.BSFSRHttpConnectionInfo.AWSAuthRuntimeService = {
    server = "aws-ars-iad.rr.amazon.com";
    port = "8891";
    path = "/bsf/";
};

prod.us-west-1.BSFSRHttpConnectionInfo.AWSAuthRuntimeService = {
    server = "aws-ars-sfo.bsf.amazon.com";
    port = "8891";
    path = "/bsf/";
};

gamma.*.BSFSRHttpConnectionInfo.AWSAuthRuntimeService = {
    server = "aws-gamma-avs-iad.bsf.amazon.com";
    port = "8891";
    path = "/bsf/";
};

*.*.BSFSRHttpConnectionInfo.AWSAuthRuntimeService = {
    server = "aws-avs.integ.amazon.com";
    port = "8891";
    path = "/bsf/";
};

# Auth runtime client configuration
*.*.AWSAuthRuntimeClient.Configuration = {
    valueClass = aws.auth.client.config.Configuration;
    valueScope = singleton;

    # Set number of retries for failed calls
    serviceCallRetryAttempts = 2;

    # Set your service name, to scope the policies that ARS returns
    # NOTE: Vendor code must be specified in all lower-case
    vendor = "lookout";

    # Cache configuration is via the CacheConfig bean, with one entry
    # for each cache type
    policyCacheConfig = {
       valueClass = aws.auth.client.config.CacheConfig;
       evictionTTLSeconds = 100;
       expirationTTLSeconds = 50;
       enableNegativeCaching = true;
       negativeExpirationTTLSeconds = 10;
    };
};

# AVS
*.*.BSFSRClassInfo.ServiceConfig.AWSAcctVerificationService = {
    description = "AWSAcctVerificationService";
    # Http settings
    proxyClass = BSFSRHttpGeneric;
    cti = "AWS|Auth|AcctVerificationService (AVS)";
    availabilityTestMethod = Ping;
    availabilityTestArgs = { Foo = Bar; Baz = Car; };
    availabilityTestShared = { Shared = Good; };
};

prod.primary.BSFSRHttpConnectionInfo.AWSAcctVerificationService = {
    server = "aws-ars-iad.rr.amazon.com";
    port = "8891";
    path = "/bsf/";
};

prod.secondary.BSFSRHttpConnectionInfo.AWSAcctVerificationService = {
    server = "aws-ars-sfo.bsf.amazon.com";
    port = "8891";
    path = "/bsf/";
};

gamma.*.BSFSRHttpConnectionInfo.AWSAcctVerificationService = {
    server = "aws-gamma-avs-iad.bsf.amazon.com";
    port = "8891";
    path = "/bsf/";
};

*.*.BSFSRHttpConnectionInfo.AWSAcctVerificationService = {
    server = "aws-avs.integ.amazon.com";
    port = "8891";
    path = "/bsf/";
};
