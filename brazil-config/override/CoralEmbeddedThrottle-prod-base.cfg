# This file contains common part of Coral Throttle config for Prod stage.
# Stale messages can cause CoralThrottle to misbehave.
*.*.CoralThrottle.staleMessageMitigation = true;

# The port on which the daemon will listen for other group connections
*.*.CoralThrottle.groupPort = 7979;

# The UNIX domain socket address to listen on for throttling queries.
# *.*.DThrottle.socketpath = "/tmp/dthrottle.sock";
*.*.DThrottle.port = 6969;

*.*.CoralThrottle.metricsFactory += {
    valueClass = com.amazon.coral.metrics.helper.QuerylogHelper;
    filename = $ROOT$/var/output/logs/throttle_log;
    program = LookoutMitigationService;
};

*.*.log4j.rootLogger = (DEBUG, rootFile);
*.*.log4j.logger.com.amazon.coral.throttle=(DEBUG);

# Throttling algorithm (currently the only one supported)
*.*.CoralThrottle.distributionStrategy = TOKEN_BUCKET;

# Not used, overridden by rules section below.
*.*.DThrottle.rate = 1000;
*.*.DThrottle.burst = 1000;

# Whitelists the following unless more specific rule is encountered in the rules section below.
*.*.DThrottle.whitelist = (
);

# Configure throttling rates per client. Matches are done by prefix. Best match wins.
# Rules take precedence over the whitelist.
*.*.DThrottle.rules = {
    # Mirror production to ensure nothing is so low that our TOD wont succeed
    # Per-operation, per-account limits. Useful for setting a per-operation limit
    # per user ARN, such as "each customer can do 10 apply mitigation requests per second".
    "Operation:LookoutMitigationService/ApplyBlackWatchMitigation,aws-user-arn:" = (10,10);
    "Operation:LookoutMitigationService/UpdateBlackWatchMitigation,aws-user-arn:" = (10,10);
    "Operation:LookoutMitigationService/ListBlackWatchMitigations,aws-user-arn:" = (10,10);
    "Operation:LookoutMitigationService/DeactivateBlackWatchMitigation,aws-user-arn:" = (10,10);

    "Operation:" = (1000,1000);
};
