<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:coral="http://schema.amazon.com/spring-extensions/coral/v1.0"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://schema.amazon.com/spring-extensions/coral/v1.0 http://schema.amazon.com/spring-extensions/coral/v1.0/coral.xsd">

{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
        {% if location['elb_internal_api_client_qualifier'] %}

            <coral:client id="elbInternalAPIClientBean.{{ realm_domain }}"
            service-client-class="com.amazon.elb.internal.LBServiceInternalClient"
            qualifier="{{ location['elb_internal_api_client_qualifier'] }}"/>

            <bean id="elbIPv6Prefix.{{ realm_domain }}" class="java.lang.String">
                <constructor-arg value="{{ location['elb_classic_ipv6_prefix'] }}"/>
            </bean>

            <bean id="elbResourceHelper.{{ realm_domain }}" class="com.amazon.blackwatch.mitigation.resource.helper.ELBResourceHelper">
                <constructor-arg name="awsCredentialsProvider" ref="elbInternalServiceCredentialsProvider.${realm}.${domain}"/>
                <constructor-arg name="elbInternalClient" ref="elbInternalAPIClientBean.{{ realm_domain }}"/>
                <constructor-arg name="regionIPv6Prefix" ref="elbIPv6Prefix.{{ realm_domain }}"/>
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="elbResourceTypeHelper.{{ realm_domain }}" class="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchELBResourceTypeHelper">
                <constructor-arg name="elbResourceHelper" ref="elbResourceHelper.{{ realm_domain }}" />
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

        {% endif %}

        <util:map id="resourceTypeHelpers.{{ realm_domain }}"
            key-type="com.amazon.blackwatch.mitigation.resource.validator.BlackWatchMitigationResourceType" 
            value-type="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchResourceTypeHelper">
            <entry key="IPAddress" value-ref="ipaddressResourceTypeHelper"/>
            <entry key="IPAddressList" value-ref="ipaddressListResourceTypeHelper"/>
            {% if location['elb_internal_api_client_qualifier'] %}
                <entry key="ELB" value-ref="elbResourceTypeHelper.{{ realm_domain }}"/>
            {% endif %}
        </util:map>

        <util:map id="resourceTypeValidatorMap.{{ realm_domain }}"
            key-type="com.amazon.blackwatch.mitigation.resource.validator.BlackWatchMitigationResourceType" 
            value-type="com.amazon.lookout.mitigation.blackwatch.model.BlackWatchResourceTypeValidator">
            <entry key="IPAddress" value-ref="IPAddressTypeValidator"/>
            <entry key="IPAddressList" value-ref="IPAddressListTypeValidator"/>
            {% if location['elb_internal_api_client_qualifier'] %}
                <entry key="ELB" value-ref="ELBTypeValidator"/>
            {% endif %}
        </util:map>
    {% endfor %}
{% endfor %}

    <!-- S3 Clients for all the regions -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="s3Client.{{ realm_domain }}" class="com.amazonaws.services.s3.AmazonS3Client">
        <constructor-arg name="credentialsProvider" ref="ServiceCredentialsProvider.{{ realm_domain }}"/>
    </bean>
    {% endfor %}
{% endfor %}


    <!-- Map from region to S3 Helpers for BlackWatchConfig -->
    <bean abstract="true" id="blackWatchConfigS3Helper.template" class="com.amazon.blackwatch.config.s3.BlackWatchConfigS3Helper">
        <!-- We do not sign, but materialset string has to be nonempty -->
        <constructor-arg name="signatureKeyMaterialSet" value="com.amazon.blackwatch.config.signature.${realm}.${domain}.keypair"/>
        <constructor-arg name="hasPrivateSignatureKey" value="false"/>
    </bean>

    <bean abstract="true" id="blackWatchS3HelperTemplate" class="com.amazon.lookout.mitigation.activities.helper.BlackWatchS3Helper">
        <constructor-arg name="configSignatureRequired" value="false"/>
    </bean>

{% macro s3helperentry(realm_domain) %}
        <entry key="{{ realm_domain.split('.')[0] }}">
        <bean parent="blackWatchS3HelperTemplate">
            <constructor-arg name="configS3Helper">
                <bean parent="blackWatchConfigS3Helper.template">
                    <constructor-arg name="s3Bucket" value="blackwatch.configuration.{{ realm_domain }}"/>
                    <constructor-arg name="s3Client" ref="s3Client.{{ realm_domain }}"/>
                </bean>
            </constructor-arg>
        </bean>
        </entry>
{% endmacro %}

    <!--  blackwatch beta -->
    <util:map id="AWSRegionToS3Helper.bwbeta">
{% for realm_domain, location in locations['border_beta'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>

    <!--  blackwatch gamma -->
    <util:map id="AWSRegionToS3Helper.gamma">
{% for realm_domain, location in locations['border_gamma'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>

    <!-- blackwatch prod -->
    <util:map id="AWSRegionToS3Helper.prod">
{% for realm_domain, location in locations['border_prod'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>
    <!-- For us-east-1.prod-border -->
    <alias name="AWSRegionToS3Helper.prod" alias="AWSRegionToS3Helper.prod-border"/>

</beans>