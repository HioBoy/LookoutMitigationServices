<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:coral="http://schema.amazon.com/spring-extensions/coral/v1.0"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://schema.amazon.com/spring-extensions/coral/v1.0 http://schema.amazon.com/spring-extensions/coral/v1.0/coral.xsd">

    <import resource="file:${spring.config.root}/mitigation-service/resource-capacity.xml"/>

{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
        {% set region, stage = realm_domain.split('.') %}
        {% if location['elb_internal_api_client_qualifier'] %}

            <coral:client id="elbInternalAPIClientBean.{{ realm_domain }}"
            service-client-class="com.amazon.elb.internal.LBServiceInternalClient"
            qualifier="{{ location['elb_internal_api_client_qualifier'] }}"/>

            <bean id="elbIPv6Prefix.{{ realm_domain }}" class="java.lang.String">
                <constructor-arg value="{{ location['elb_classic_ipv6_prefix'] }}"/>
            </bean>

            <bean id="elbResourceHelper.{{ realm_domain }}" class="com.amazon.blackwatch.mitigation.resource.helper.ELBResourceHelper">
                <constructor-arg name="awsCredentialsProvider" ref="elbInternalServiceCredentialsProvider.${realm}.${domain}"/>
                <constructor-arg name="elbInternalClient" ref="elbInternalAPIClientBean.{{ realm_domain }}"/>
                <constructor-arg name="regionIPv6Prefix" ref="elbIPv6Prefix.{{ realm_domain }}"/>
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="elbResourceTypeHelper.{{ realm_domain }}" class="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchELBResourceTypeHelper">
                <constructor-arg name="elbResourceHelper" ref="elbResourceHelper.{{ realm_domain }}" />
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

        {% endif %}

        {% if location['ec2_internal_api_client_qualifier'] %}

            <coral:client id="eipInternalAPIClientBean.{{ realm_domain }}"
                service-client-class="com.amazonaws.askec2.AskEC2ServiceClient"
                qualifier="{{ location['ec2_internal_api_client_qualifier'] }}"/>

            <bean id="Ec2InstanceResourcePropertiesProvider.{{ realm_domain }}"
                    class="com.amazon.blackwatch.mitigation.resource.helper.ec2.Ec2InstanceResourcePropertiesProvider">
                <constructor-arg name="awsCredentialsProvider" ref="askEC2InternalServiceCredentialsProvider.${realm}.${domain}"/>
                <constructor-arg name="askEC2ServiceClient" ref="eipInternalAPIClientBean.{{ realm_domain }}"/>
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="eipResourceHelper.{{ realm_domain }}"
                    class="com.amazon.blackwatch.mitigation.resource.helper.EIPResourceHelper">
                <constructor-arg name="awsCredentialsProvider" ref="askEC2InternalServiceCredentialsProvider.${realm}.${domain}"/>
                <constructor-arg name="askEC2ServiceClient" ref="eipInternalAPIClientBean.{{ realm_domain }}"/>
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="eipResourceTypeHelper.{{ realm_domain }}"
                    class="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchEIPResourceTypeHelper">
                <constructor-arg name="eipResourceHelper" ref="eipResourceHelper.{{ realm_domain }}" />
            </bean>

            <bean id="askEC2ClientWithCredentials.{{ realm_domain }}"
                    class="com.amazonaws.askec2.commons.client.AskEC2ClientProvider"
                    factory-method="get"
                    factory-bean="askEC2ClientProvider.{{ realm_domain }}">
            </bean>

            <bean id="askEC2ClientProvider.{{ realm_domain }}"
                    class="com.amazonaws.askec2.commons.client.AskEC2ClientProvider" factory-method="defaultClientProviderForQualifier">
                <constructor-arg name="qualifier" value="{{ location['ec2_internal_api_client_qualifier'] }}" />
                <constructor-arg name="identityProvider" ref="askEc2StsAssumeRoleSessionIdentityProvider.{{ realm_domain }}" />
            </bean>

            <bean id="askEc2ResourceInfoHelper.{{ realm_domain }}" class="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
                <constructor-arg name="askEC2Client" ref="askEC2ClientWithCredentials.{{ realm_domain }}" />
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="publicIpFetcher.{{ realm_domain }}" class="com.amazon.bardock.resources.ec2.PublicIpFetcher">
                <constructor-arg name="askEC2Client" ref="askEC2ClientWithCredentials.{{ realm_domain }}" />
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

        {% endif %}

        {% if location['glb_internal_api_client_qualifier'] %}
            <coral:client id="glbServiceTeamApiClientBean.{{ realm_domain }}"
                service-client-class="com.amazonaws.ubiquity.serviceteamapi.v20181004.UbiquityServiceTeamAPIClient"
                qualifier="{{ location['glb_internal_api_client_qualifier'] }}"/>

            <bean id="glbResourceHelper.{{ realm_domain }}"
                    class="com.amazon.blackwatch.mitigation.resource.helper.GLBResourceHelper">
                <constructor-arg name="awsCredentialsProvider" ref="glbInternalServiceCredentialsProvider.us-west-2.{{ stage }}"/>
                <constructor-arg name="ubiquityClient" ref="glbServiceTeamApiClientBean.{{ realm_domain }}"/>
                <constructor-arg name="metricsFactory" ref="metricsFactory" />
            </bean>

            <bean id="glbResourceTypeHelper.{{ realm_domain }}"
                    class="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchGLBResourceTypeHelper">
                <constructor-arg name="glbResourceHelper" ref="glbResourceHelper.{{ realm_domain }}" />
                <constructor-arg name="albCapacityHelper" ref="albCapacityHelper" />
                <constructor-arg name="eipCapacityHelper" ref="eipCapacityHelper" />
                <constructor-arg name="nlbCapacityHelper" ref="nlbCapacityHelper" />
                <constructor-arg name="ec2InstanceCapacityHelper" ref="ec2InstanceCapacityHelper" />
            </bean>
        {% endif %}

        <util:map id="resourceTypeHelpers.{{ realm_domain }}"
            key-type="com.amazon.blackwatch.mitigation.state.model.BlackWatchMitigationResourceType"
            value-type="com.amazon.blackwatch.mitigation.resource.helper.BlackWatchResourceTypeHelper">
            <entry key="IPAddress" value-ref="ipaddressResourceTypeHelper"/>
            <entry key="IPAddressList" value-ref="ipaddressListResourceTypeHelper"/>
            {% if location['elb_internal_api_client_qualifier'] %}
                <entry key="ELB" value-ref="elbResourceTypeHelper.{{ realm_domain }}"/>
            {% endif %}
            {% if location['ec2_internal_api_client_qualifier'] %}
                <entry key="ElasticIP" value-ref="eipResourceTypeHelper.{{ realm_domain }}"/>
            {% endif %}
            {% if location['glb_internal_api_client_qualifier'] %}
                <entry key="GLB" value-ref="glbResourceTypeHelper.{{ realm_domain }}"/>
            {% endif %}
        </util:map>

        <util:map id="resourceTypeValidatorMap.{{ realm_domain }}"
            key-type="com.amazon.blackwatch.mitigation.state.model.BlackWatchMitigationResourceType"
            value-type="com.amazon.lookout.mitigation.blackwatch.model.BlackWatchResourceTypeValidator">
            <entry key="IPAddress" value-ref="IPAddressTypeValidator"/>
            <entry key="IPAddressList" value-ref="IPAddressListTypeValidator"/>
            {% if location['elb_internal_api_client_qualifier'] %}
                <entry key="ELB" value-ref="ELBTypeValidator"/>
            {% endif %}
            {% if location['ec2_internal_api_client_qualifier'] %}
                <entry key="ElasticIP" value-ref="EIPTypeValidator"/>
            {% endif %}
            {% if location['glb_internal_api_client_qualifier'] %}
                <entry key="GLB" value-ref="GLBTypeValidator"/>
            {% endif %}

        </util:map>
    {% endfor %}
{% endfor %}

<!-- TODO Generate these mappings in a more efficient manner https://sim.amazon.com/issues/BLACKWATCH-4094 -->
<util:map id="bwbeta.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "bwbeta" %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="bwbeta.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "bwbeta" %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="beta.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "beta" %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="beta.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "beta" %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<!-- Gamma stack of Blackwatch uses prod stack of askEc2 -->
<util:map id="gamma.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="gamma.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod-border.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod-border.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and ((stage == "prod" and region != "us-east-1") or stage == "prod-border") %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod-cn.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "prod-cn" %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="prod-cn.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "prod-cn" %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="edge-prod-cn.askEc2ResourceInfoHelpers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.AskEc2ResourceInfoHelper">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "edge-prod-cn" %}
                <entry key="{{ region }}" value-ref="askEc2ResourceInfoHelper.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

<util:map id="edge-prod-cn.publicIpFetchers"
                 key-type="java.lang.String"
                 value-type="com.amazon.bardock.resources.ec2.PublicIpFetcher">
    {% for stack in locations.values() %}
        {% for realm_domain, location in stack.items() %}
            {% set region, stage = realm_domain.split('.') %}
            {% if location['ec2_internal_api_client_qualifier'] and stage == "edge-prod-cn" %}
                <entry key="{{ region }}" value-ref="publicIpFetcher.{{ realm_domain }}" />
            {% endif %}
        {% endfor %}
    {% endfor %}
</util:map>

    <!-- S3 Clients for all the regions -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
        {% set parts = realm_domain.split('.') %}
        {% set region = parts[0] %}

        <bean id="s3ClientBuilder.{{ realm_domain }}" class="com.amazonaws.services.s3.AmazonS3ClientBuilder">
            <property name="region" value="{{ region }}"/>
            <property name="credentials" ref="ServiceCredentialsProvider.{{ realm_domain }}"/>
        </bean>
        <bean id="s3Client.{{ realm_domain }}" factory-bean="s3ClientBuilder.{{ realm_domain }}" factory-method="build"/>

    {% endfor %}
{% endfor %}

    <!-- Map from region to S3 Helpers for BlackWatchConfig -->
    <bean abstract="true" id="blackWatchConfigS3Helper.template" class="com.amazon.blackwatch.config.s3.BlackWatchConfigS3Helper">
        <!-- We do not sign, but materialset string has to be nonempty -->
        <constructor-arg name="signatureKeyMaterialSet" value="com.amazon.blackwatch.config.signature.${realm}.${domain}.keypair"/>
        <constructor-arg name="hasPrivateSignatureKey" value="false"/>
    </bean>

    <bean abstract="true" id="blackWatchS3HelperTemplate" class="com.amazon.lookout.mitigation.activities.helper.BlackWatchS3Helper">
        <constructor-arg name="configSignatureRequired" value="false"/>
    </bean>

{% macro s3helperentry(realm_domain) %}
        <entry key="{{ realm_domain.split('.')[0] }}">
        <bean parent="blackWatchS3HelperTemplate">
            <constructor-arg name="configS3Helper">
                <bean parent="blackWatchConfigS3Helper.template">
                    <constructor-arg name="s3Bucket" value="blackwatch.configuration.{{ realm_domain }}"/>
                    <constructor-arg name="s3Client" ref="s3Client.{{ realm_domain }}"/>
                </bean>
            </constructor-arg>
        </bean>
        </entry>
{% endmacro %}

    <!--  blackwatch beta -->
    <util:map id="AWSRegionToS3Helper.bwbeta">
{% for realm_domain, location in locations['border_beta'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>

    <!--  blackwatch gamma -->
    <util:map id="AWSRegionToS3Helper.gamma">
{% for realm_domain, location in locations['border_gamma'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>

    <!-- blackwatch prod -->
    <util:map id="AWSRegionToS3Helper.prod">
{% for realm_domain, location in locations['border_prod'].items() %}
        {{ s3helperentry(realm_domain) }}
{% endfor %}
    </util:map>
    <!-- For us-east-1.prod-border -->
    <alias name="AWSRegionToS3Helper.prod" alias="AWSRegionToS3Helper.prod-border"/>

</beans>
