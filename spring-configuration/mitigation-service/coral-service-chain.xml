<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation=
    "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    Construct an orchestrator using the Orchestrator helper. The only thing
    you'll need to provide is a configured Chain.
    -->
    <bean id="orchestrator" class="com.amazon.coral.service.helper.OrchestratorHelper">
        <constructor-arg>
            <ref bean="chain"/>
        </constructor-arg>
        <!-- waiting for 5 minutes for coral framework to clean up its thread. 
             More detail can be found here: https://issues.amazon.com/SF-1578 
        -->
        <constructor-arg value="300000"/> 
    </bean>

    <!-- Configure the Chain which contains the list of Handlers to apply -->
    <bean id="chain" class="com.amazon.coral.service.helper.ChainHelper" depends-on="logger">
        <property name="handlers">
            <list>
                <bean class="com.amazon.coral.service.Log4jAwareRequestIdHandler"/>
                
                <bean class="com.amazon.coral.service.HttpHandler"/>
                <bean class="com.amazon.coral.service.PingHandler"/>
                
                <!-- Here are protocol handlers. You need at least one.-->
                <bean class="com.amazon.coral.service.http.HttpBindingHandler"/>
                <bean class="com.amazon.coral.service.HttpRpcHandler"/>
                <ref bean="AuthenticationHandler"/>
                <bean class="com.amazon.coral.service.ModelHandler"/>
                <bean class="com.amazon.coral.service.http.ContentHandler"/>
                <bean class="com.amazon.coral.validate.ValidationHandler"/>
                
                <!-- This always comes last.-->
                <bean class="com.amazon.coral.spring.SpringActivityHandler"/>
            </list>
        </property>
    </bean>
    
    <bean id="AuthenticationHandler" class="com.amazon.coral.service.ARSAuthenticationHelper" depends-on="appConfigHelper">
        <constructor-arg>
    	    <bean class="com.amazon.coral.service.AwsAuthNConfig">
    	        <property name="signingSchemes" value="V4" />
     	        <property name="region" ref="${realm}.arsAuthNRegion" />
     	        <property name="service" value="lookout" />
     	        <property name="vendorCode" value="lookout" />
     	        <property name="authNCache" ref="AuthNCache" />
     	        <property name="policyCache" ref="PolicyCache" />
     	        <property name="headersToSecure" value="" />
            </bean>
        </constructor-arg>
    </bean>

    <!-- 
    HashMapCache are generally disapproved in Prod because real customer traffic could 
    overwhelm the cache. We do not expect that many number of diverse clients or very 
    high volumes of requests to overwhelm the HashMapCache for LookoutMitigationService.
    --> 
    <bean id="AuthNCache" class="amazon.cache.impl.HashMapCache" />
    <bean id="PolicyCache" class="amazon.cache.impl.HashMapCache" />
</beans>
