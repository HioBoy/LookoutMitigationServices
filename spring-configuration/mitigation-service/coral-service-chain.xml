<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation=
    "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    Construct an orchestrator using the Orchestrator helper. The only thing
    you'll need to provide is a configured Chain.
    -->
    <bean id="orchestrator" class="com.amazon.coral.service.helper.OrchestratorHelper">
        <constructor-arg>
            <ref bean="chain"/>
        </constructor-arg>
        <!-- waiting for 5 minutes for coral framework to clean up its thread. 
             More detail can be found here: https://issues.amazon.com/SF-1578 
        -->
        <constructor-arg value="300000"/> 
    </bean>

    <!-- Configure the Chain which contains the list of Handlers to apply -->
    <bean id="chain" class="com.amazon.coral.service.helper.ChainHelper" depends-on="logger">
        <property name="handlers">
            <list>
                <bean class="com.amazon.coral.service.Log4jAwareRequestIdHandler"/>
                
                <bean class="com.amazon.coral.service.HttpHandler"/>
                <bean class="com.amazon.coral.service.PingHandler"/>
                
                <!-- Here are protocol handlers. You need at least one.-->
                <bean class="com.amazon.coral.service.http.HttpBindingHandler"/>
                <bean class="com.amazon.coral.service.HttpRpcHandler"/>
                
                <!-- ContentHandler has to be before the AuthenticationHandler to be able to use the Explorer. -->
                <bean class="com.amazon.coral.service.http.ContentHandler"/>
                
                <ref bean="AuthenticationHandler"/>
                
                <bean class="com.amazon.coral.service.ModelHandler"/>
                <bean class="com.amazon.coral.validate.ValidationHandler"/>
                
                <!-- This always comes last.-->
                <bean class="com.amazon.coral.spring.SpringActivityHandler">
                    <property name="globalInterceptorClassNames">
                        <list>
                            <!-- We have to provide the fully-qualified class name for the global interceptors. -->
                            <value>com.amazon.lookout.mitigation.service.interceptors.ActivityAuthorizationInterceptor</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    <bean id="AuthenticationHandler" class="com.amazon.coral.service.ARSAuthenticationHelper" depends-on="appConfigHelper">
        <constructor-arg ref="AuthNConfig"/>
        <constructor-arg ref="AuthRuntimeClient"/>
    </bean>

    <bean id="AuthNConfig" class="com.amazon.coral.service.AwsAuthNConfig">
        <property name="signingSchemes" value="V4"/>
        <property name="region" value="${realm}"/> <!-- Auth in the same region as the region where the service runs -->
        <property name="service" value="lookout"/>
        <property name="vendorCode" value="lookout"/>
        <property name="headersToSecure" value=""/>
    </bean>

    <bean id="AuthRuntimeFactory" class="aws.auth.client.impl.AuthRuntimeClientFactory">
        <property name="authenticateResultCache" ref="AuthNCache"/>
        <property name="policyCache" ref="PolicyCache"/>
        <property name="configuration" ref="ArcConfig"/>
    </bean>

    <bean id="AuthRuntimeClient" factory-bean="AuthRuntimeFactory" factory-method="newAuthRuntimeClient"/>

    <!--
    HashMapCache are generally disapproved in Prod because real customer traffic could
    overwhelm the cache. We do not expect that many number of diverse clients or very
    high volumes of requests to overwhelm the HashMapCache for LookoutMitigationService.
    -->
    <bean id="AuthNCache" class="amazon.cache.Cache">
        <constructor-arg>
            <bean class="amazon.cache.impl.HashMapCache"/>
        </constructor-arg>
    </bean>

    <bean id="PolicyCache" class="amazon.cache.Cache">
        <constructor-arg>
            <bean class="amazon.cache.impl.HashMapCache"/>
        </constructor-arg>
    </bean>

    <bean id="ArcConfig" class="aws.auth.client.config.Configuration">
        <!-- Set the qualifier for selecting the coral client config and ARS endpoint (S3 has a dedicated one, -->
        <!-- if your service does not have, simply put "${domain}.${realm}" -->
        <property name="Qualifier" value="${domain}.${realm}"/>
        <!-- Set vendor name to scope the policies that ARS returns -->
        <property name="Vendor" value="lookout"/>
    </bean>
</beans>
