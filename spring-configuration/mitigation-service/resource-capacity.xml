<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- EC2 INSTANCE CAPACITY HELPER -->

    <bean id="ec2InstanceCapacityHelper" class="com.amazon.blackwatch.mitigation.resource.helper.capacityhelper.Ec2InstanceCapacityHelper">
        <constructor-arg name="resourcePropertiesProvider" ref="Ec2InstanceResourcePropertiesProvider"/>
        <constructor-arg name="resourceBandwidthProvider" ref="ec2InstanceBandwidthProvider" />
        <constructor-arg name="ec2baApplicationConfig" ref="ec2baApplicationConfig" />
        <constructor-arg name="gunpowderApplicationConfig" ref="gunpowderApplicationConfig" />
    </bean>

    <bean id="Ec2InstanceResourcePropertiesProvider"
            class="com.amazon.blackwatch.mitigation.resource.helper.ec2.Ec2InstanceResourcePropertiesProvider">
        <constructor-arg name="awsCredentialsProvider" ref="askEC2InternalServiceCredentialsProvider.${realm}.${domain}"/>
        <constructor-arg name="askEC2ServiceClient" ref="eipInternalAPIClientBean.${realm}.${domain}"/>
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <!-- EIP CAPACITY HELPER -->

    <bean id="eipCapacityHelper" class="com.amazon.blackwatch.mitigation.resource.helper.capacityhelper.EipCapacityHelper">
        <constructor-arg name="resourcePropertiesProvider" ref="bardockEc2PropertiesProvider" />
        <constructor-arg name="resourceBandwidthProvider" ref="ec2InstanceBandwidthProvider" />
        <constructor-arg name="ec2baApplicationConfig" ref="ec2baApplicationConfig" />
        <constructor-arg name="gunpowderApplicationConfig" ref="gunpowderApplicationConfig" />
    </bean>

    <bean id="bardockEc2PropertiesProvider"
          class="com.amazon.blackwatch.mitigation.resource.helper.eip.BardockEc2ResourcePropertiesProvider">
        <constructor-arg name="askEc2ResourceInfoHelpers" ref="${domain}.askEc2ResourceInfoHelpers" />
        <constructor-arg name="publicIpFetchers" ref="${domain}.publicIpFetchers" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <bean id="ec2InstanceBandwidthProvider"
          class="com.amazon.blackwatch.mitigation.resource.helper.bandwidthprovider.Ec2ResourceBandwidthProvider">
        <constructor-arg name="thresholdMaster" ref="thresholdMaster" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <!-- NLB CAPACITY HELPER -->

    <bean id="nlbCapacityHelper" class="com.amazon.blackwatch.mitigation.resource.helper.capacityhelper.NlbCapacityHelper">
        <constructor-arg name="resourcePropertiesProvider" ref="elbInternalNlbResourcePropertiesProvider" />
        <constructor-arg name="resourceBandwidthProvider" ref="nlbResourceBandwidthProvider" />
    </bean>

    <bean id="elbInternalNlbResourcePropertiesProvider" class="com.amazon.blackwatch.mitigation.resource.helper.nlb.ElbInternalNlbResourcePropertiesProvider">
        <constructor-arg name="elbInternalClientProvider" ref="${domain}.elbInternalClientProvider" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <bean id="nlbResourceBandwidthProvider" class="com.amazon.blackwatch.mitigation.resource.helper.bandwidthprovider.NlbResourceBandwidthProvider">
        <constructor-arg name="bigMacMitigationServiceClients" ref="bigMacMitigationServiceClients" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <bean id="beta.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::670529207309:role/ApiGatewayInvokerRole-PreProd-%s" />
    </bean>

    <bean id="bwbeta.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::670529207309:role/ApiGatewayInvokerRole-PreProd-%s" />
    </bean>

    <bean id="gamma.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::795087522882:role/ApiGatewayInvokerRole-Prod-%s" />
    </bean>

    <bean id="prod.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::795087522882:role/ApiGatewayInvokerRole-Prod-%s" />
    </bean>

    <bean id="prod-border.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::795087522882:role/ApiGatewayInvokerRole-Prod-%s" />
    </bean>

    <bean id="prod-cn.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::690205625825:role/ApiGatewayInvokerRole-Prod-%s" />
    </bean>

    <!--
    mitsvc in china edge do not need talk to bigmac. We should make this optional in our code.
    for now, just assume edge china use the same role as bwit border in China
    Also, I don't know why we put all the domain specific bean here.
    We do have a domain xml file, should move all the domain specific beans there. Track in: https://issues.amazon.com/issues/BLACKWATCH-4264
    -->
    <bean id="edge-prod-cn.bigMacMitigationServiceRoleArnTemplate" class="java.lang.String">
        <constructor-arg value="arn:aws:iam::690205625825:role/ApiGatewayInvokerRole-Prod-%s" />
    </bean>

    <bean id="bigMacMitigationServiceClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.BigMacMitigationServiceClientProvider">
        <constructor-arg name="bigMacMitigationServiceRoleArnTemplate" ref="${domain}.bigMacMitigationServiceRoleArnTemplate" />
        <constructor-arg name="domain" ref="${domain}.bigMacMitigationServiceClientProviderDomain" />
        <constructor-arg name="awsCredentialsProvider" ref="${domain}.bigMacMitigationServiceCredentialsProvider" />
    </bean>

    <bean id="beta.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="${domain}" />
    </bean>

    <bean id="bwbeta.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="${domain}" />
    </bean>

    <bean id="gamma.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="prod" />
    </bean>

    <bean id="prod.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="${domain}" />
    </bean>

    <bean id="prod-border.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="prod" />
    </bean>

    <bean id="prod-cn.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="prod" />
    </bean>

    <bean id="edge-prod-cn.bigMacMitigationServiceClientProviderDomain" class="java.lang.String">
        <constructor-arg value="prod" />
    </bean>

    <bean id="beta.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="bwbeta.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="gamma.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.prod" />
    </bean>

    <bean id="prod.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="prod-border.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="prod-cn.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="edge-prod-cn.bigMacMitigationServiceCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.nlb.private_api_user.${realm}.${domain}" />
    </bean>

    <bean id="bigMacMitigationServiceClients" factory-bean="bigMacMitigationServiceClientProvider" factory-method="getGlobalAzClientMap" />

    <!-- ALB CAPACITY HELPER -->

    <bean id="albCapacityHelper" class="com.amazon.blackwatch.mitigation.resource.helper.capacityhelper.AlbCapacityHelper">
        <constructor-arg name="resourcePropertiesProvider" ref="albResourcesPropertiesProvider" />
        <constructor-arg name="resourceBandwidthProvider" ref="albResourceBandwidthProvider" />
    </bean>

    <bean id="albResourcesPropertiesProvider"
          class="com.amazon.blackwatch.mitigation.resource.helper.alb.AlbResourcePropertiesProvider">
        <constructor-arg name="elbInternalClientProvider" ref="${domain}.elbInternalClientProvider" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <bean id="albResourceBandwidthProvider" class="com.amazon.blackwatch.mitigation.resource.helper.bandwidthprovider.AlbResourceBandwidthProvider">
        <constructor-arg name="resourceBandwidthProvider" ref="ec2InstanceBandwidthProvider" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <!-- SHARED CAPACITY HELPER DEPENDENCIES -->

    <bean id="thresholdMaster" class="com.amazon.bardock.resources.threshold.ThresholdMaster">
        <constructor-arg name="thresholdModifiers" ref="thresholdModifiers" />
        <constructor-arg name="bobbinLog" ref="bobbinLog" />
    </bean>

    <bean id="bobbinLog" class="com.amazon.bardock.detection.bobbin.Bobbin">
        <constructor-arg name="output" ref="bobbinOutput" />
        <constructor-arg name="metricsFactory" ref="metricsFactory" />
    </bean>

    <bean id="bobbinOutput" class="com.amazon.bardock.detection.bobbin.BobbinNullOutput" />

    <util:list id="thresholdModifiers">
        <ref bean="defaultThresholdModifier" />
        <ref bean="ec2baInstanceTypeThresholdModifier" />
        <ref bean="gunpowderInstanceTypeThresholdModifier"/>
    </util:list>

    <bean id="defaultThresholdModifier" class="com.amazon.bardock.resources.threshold.DefaultThresholds" />

    <bean id="ec2baInstanceTypeThresholdModifier" class="com.amazon.bardock.resources.threshold.Ec2XenInstanceTypeThresholdModifier">
        <constructor-arg name="CONFIG" ref="ec2baApplicationConfig" />
    </bean>

    <bean id="gunpowderInstanceTypeThresholdModifier" class="com.amazon.bardock.resources.threshold.Ec2XenInstanceTypeThresholdModifier">
        <constructor-arg name="CONFIG" ref="gunpowderApplicationConfig" />
    </bean>

    <bean id="ec2baApplicationConfig"
          class="com.amazon.bardock.resources.ec2bandwidtharbiter.Ec2baApplicationConfig"
          factory-method="fromFile">
        <constructor-arg name="name" value="etc/ec2/ec2-bandwidth-arbiter/ec2ba-application-config.yaml" />
    </bean>

    <bean id="gunpowderApplicationConfig"
          class="com.amazon.bardock.resources.ec2bandwidtharbiter.Ec2baApplicationConfig"
          factory-method="fromFile">
        <constructor-arg name="name" value="etc/ec2/ec2-bandwidth-arbiter/gunpowder-resource-config-conversion.yaml" />
    </bean>

    <bean id="beta.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="${domain}.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="${domain}" />
    </bean>

    <bean id="bwbeta.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="${domain}.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="${domain}" />
    </bean>

    <!-- BlackWatch gamma will call ELB Prod -->
    <bean id="gamma.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="gamma.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="prod" />
    </bean>

    <bean id="prod.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="prod.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="${domain}" />
    </bean>

    <bean id="prod-border.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="${domain}.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="prod" />
    </bean>

    <bean id="prod-cn.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="prod.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="prod" />
    </bean>

    <bean id="edge-prod-cn.elbInternalClientProvider" class="com.amazon.blackwatch.mitigation.resource.helper.util.ElbInternalClientProvider">
        <constructor-arg name="odinAWSCredentialsProvider" ref="${domain}.bigMacMitigationServiceCredentialsProvider" />
        <constructor-arg name="domain" value="${domain}" />
    </bean>

</beans>
