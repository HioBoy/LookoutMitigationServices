<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Credentials we use to assume the roles below -->
    <bean id="ServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.lookout.blackwatch.api.${realm}.${domain}"/>
    </bean>

    <!-- Credentials we use to assume the roles below -->
    <bean id="elbInternalServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.elb.private_api_user.${realm}.${domain}"/>
    </bean>
    <!-- Roles to assume for ELB internal Services -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="elbInternalServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
        <constructor-arg name="longLivedCredentialsProvider" ref="elbInternalServiceRolesUserCredentialsProvider"/>
        <constructor-arg name="roleSessionName" value="ELBInternalAPIRoleSession"/>
        <constructor-arg name="roleArn" value="{{ location['elb_internal_api_role'] }}"/>
    </bean>
    {% endfor %}
{% endfor %}

<!-- Credentials we use to assume the AskEC2 roles below -->
    <bean id="askEC2InternalServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.askec2.private_api_user.${realm}.${domain}"/>
    </bean>
    <!-- Roles to assume for askEC2 internal Services -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="askEC2InternalServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
        <constructor-arg name="longLivedCredentialsProvider" ref="askEC2InternalServiceRolesUserCredentialsProvider"/>
        <constructor-arg name="roleSessionName" value="askEC2InternalAPIRoleSession"/>
        <constructor-arg name="roleArn" value="{{ location['ec2_internal_api_role'] }}"/>
    </bean>
    {% endfor %}
{% endfor %}

    <!-- Roles to assume for cross-region access to Services -->

{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="ServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
        <constructor-arg name="longLivedCredentialsProvider" ref="ServiceRolesUserCredentialsProvider"/>
        <constructor-arg name="roleSessionName" value="BWAPIWorkers"/>
        <constructor-arg name="roleArn" value="arn:aws:iam::{{ location['account'] }}:role/bwapi_remote_access_role.{{ realm_domain }}"/>
    </bean>
    {% endfor %}
{% endfor %}
</beans>
