<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Credentials we use to assume the roles below -->
    <bean id="ServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.lookout.blackwatch.api.${realm}.${domain}"/>
    </bean>

    <!-- Credentials we use to assume the roles below -->
    <bean id="elbInternalServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.elb.private_api_user.${realm}.${domain}"/>
    </bean>
    <!-- Roles to assume for ELB internal Services -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="elbInternalServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
        <constructor-arg name="longLivedCredentialsProvider" ref="elbInternalServiceRolesUserCredentialsProvider"/>
        <constructor-arg name="roleSessionName" value="ELBInternalAPIRoleSession"/>
        <constructor-arg name="roleArn" value="{{ location['elb_internal_api_role'] }}"/>
    </bean>
    {% endfor %}
{% endfor %}

    <!-- Credentials we use to assume the AskEC2 roles below -->
    <bean id="askEC2InternalServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.askec2.private_api_user.${realm}.${domain}"/>
    </bean>

    <bean id="askEc2StsAssumeRoleSessionIdentityProvider" class="com.amazonaws.askec2.commons.auth.sts.STSAssumeRoleSessionIdentityProvider">
        <constructor-arg name="stsClientProvider" ref="askEc2StsClientProvider" />
        <constructor-arg name="stsAssumeRoleCredentialsIdentifier" ref="askEc2StsAssumeRoleCredentialsIdentifier.${realm}.${domain}" />
    </bean>

    <bean id="askEc2StsClientProvider" class="com.amazonaws.askec2.commons.auth.sts.STSClientProvider">
        <constructor-arg name="region" ref="region.${realm}.${domain}" />
        <constructor-arg name="socketTimeout" value="3000" />
        <constructor-arg name="connectionTimeout" value="5000" />
        <constructor-arg name="errorRetry" value="3" />
    </bean>

    <!-- Roles to assume for askEC2 internal Services -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="askEC2InternalServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
        <constructor-arg name="longLivedCredentialsProvider" ref="askEC2InternalServiceRolesUserCredentialsProvider"/>
        <constructor-arg name="roleSessionName" value="askEC2InternalAPIRoleSession"/>
        <constructor-arg name="roleArn" value="{{ location['ec2_internal_api_role'] }}"/>
    </bean>

    <bean id="askEc2StsAssumeRoleCredentialsIdentifier.{{ realm_domain }}" class="com.amazonaws.askec2.commons.auth.sts.STSAssumeRoleCredentialsIdentifier" >
        <constructor-arg name="roleArn" value="{{ location['ec2_internal_api_role'] }}" />
        <constructor-arg name="roleSessionName" value="askEC2InternalAPIRoleSession" />
        <constructor-arg name="longLivedCredentialsMaterialSet" value="com.amazon.blackwatch.askec2.private_api_user.{{ realm_domain }}" />
    </bean>

    <bean id="askEc2StsAssumeRoleSessionIdentityProvider.{{ realm_domain }}" class="com.amazonaws.askec2.commons.auth.sts.STSAssumeRoleSessionIdentityProvider">
        <constructor-arg name="stsClientProvider" ref="askEc2StsClientProvider" />
        <constructor-arg name="stsAssumeRoleCredentialsIdentifier" ref="askEc2StsAssumeRoleCredentialsIdentifier.{{ realm_domain }}" />
    </bean>
    {% endfor %}
{% endfor %}

    <!-- Roles to assume for cross-region access to Services -->

{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
        {% set parts = realm_domain.split('.') %}
        {% set region = parts[0] %}
        {% set partition = 'aws' %}
        {% if  parts[1].endswith('cn') %}
            {% set partition = 'aws-cn' %}
        {% endif %}
        <bean id="region.{{ realm_domain }}" class="com.aws.rip.RIPHelper" factory-method="getRegion">
            <constructor-arg value="{{ region }}" />
        </bean>
        <bean id="stsService.{{ realm_domain }}" class="com.aws.rip.models.service.Service" factory-bean="region.{{ realm_domain }}" factory-method="getService">
            <constructor-arg value="sts" />
        </bean>

        <bean id="stsClientEndpoint.{{ realm_domain }}" class="java.lang.String" factory-bean="stsService.{{ realm_domain }}" factory-method="getEndpoint"/>

        <bean id="ServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
            <constructor-arg name="longLivedCredentialsProvider" ref="ServiceRolesUserCredentialsProvider"/>
            <constructor-arg name="roleSessionName" value="BWAPIWorkers"/>
            <constructor-arg name="roleArn" value="arn:{{ partition }}:iam::{{ location['account'] }}:role/bwapi_remote_access_role.{{ realm_domain }}"/>
            <property name="sTSClientEndpoint" ref="stsClientEndpoint.{{ realm_domain }}"/>
        </bean>
    {% endfor %}
{% endfor %}

    <!-- Credentials we use to assume the GLB roles below -->
    <bean id="glbInternalServiceRolesUserCredentialsProvider" class="amazon.odin.awsauth.OdinAWSCredentialsProvider">
        <constructor-arg name="materialSetName" value="com.amazon.blackwatch.glb.private_api_user.${realm}.${domain}"/>
    </bean>
    <!-- Roles to assume for GLB internal Services -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
        {% set region, stage = realm_domain.split('.') %}
        {% set partition = 'aws' %}
        {% if  stage.endswith('cn') %}
            {% set partition = 'aws-cn' %}
        {% endif %}
        <!-- TODO: don't use deprecated constructors and also make roleSessionName a function of the hostname -->
        <bean id="glbInternalServiceCredentialsProvider.{{ realm_domain }}" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
            <constructor-arg name="longLivedCredentialsProvider" ref="glbInternalServiceRolesUserCredentialsProvider"/>
            <constructor-arg name="roleSessionName" value="GLBInternalAPIRoleSessionByService.{{ realm_domain }}"/>
            <constructor-arg name="roleArn" value="arn:{{ partition }}:iam::{{ location['account'] }}:role/bwcli_ubiquity_api_access_role.{{ realm_domain }}"/>
            <property name="sTSClientEndpoint" ref="stsClientEndpoint.{{ realm_domain }}"/>
        </bean>
        {% if region == "us-west-2" and stage == "prod" %}
            <bean id="glbInternalServiceCredentialsProvider.us-west-2.prod-border" class="com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider">
                <constructor-arg name="longLivedCredentialsProvider" ref="glbInternalServiceRolesUserCredentialsProvider"/>
                <constructor-arg name="roleSessionName" value="GLBInternalAPIRoleSessionByWorker.us-east-1.prod-border"/>
                <constructor-arg name="roleArn" value="arn:{{ partition }}:iam::{{ location['account'] }}:role/bwcli_ubiquity_api_access_role.{{ realm_domain }}"/>
                <property name="sTSClientEndpoint" ref="stsClientEndpoint.{{ realm_domain }}"/>
            </bean>
        {% endif %}
    {% endfor %}
{% endfor %}


    <!-- BAM and EC2 assumed-role ARNs that are used to access LookoutMitigationService -->
{% for stack in locations.values() %}
    {% for realm_domain, location in stack.items() %}
    <bean id="bamAndEc2OwnerArnPrefix.{{ realm_domain }}" class="java.lang.String">
        <constructor-arg value="arn:aws:sts::{{ location['account'] }}:assumed-role/bwapi_cust_ec2.{{ realm_domain }}" />
    </bean>
    {% endfor %}
{% endfor %}
</beans>
